@if (supplierList == null)
{
	<p>
		<em>
			@loadingMessage
		</em>
	</p>
}
else
{
	<BlazoredTypeahead SearchMethod="@searchSupplier"
					   TValue="SupplierDto"
					   TItem="SupplierDto"
					   Value="selectedSupplier"
					   ValueChanged="SelectedSupplierChanged"
					   ValueExpression="@(()=>selectedSupplier)"
					   placeHolder="Search by supplier name"
					   ShowDropDownOnFocus="true"
					   EnableDropDown="true"
					   Debounce="500">
		<SelectedTemplate>
			@context.Name
		</SelectedTemplate>
		<ResultTemplate>
			@context.Name (@context.IsActive.ToString())
		</ResultTemplate>
		<NotFoundTemplate>
			Sorry, there weren't any search results.
		</NotFoundTemplate>
	</BlazoredTypeahead>
}



@code {


	[Parameter]
	public Guid Value { get; set; }

	[Parameter]
	public EventCallback<Guid> ValueChanged { get; set; }

	[Inject]
	HttpClient Client { get; set; }

	[Inject]
	ModalManager ModalManager { get; set; }

	List<SupplierDto> supplierList;
	SupplierDto selectedSupplier = new SupplierDto();

	string loadingMessage = "Loading...";

	protected override async Task OnInitializedAsync()
	{
		try
		{
			supplierList = await Client.GetServiceResponseAsync<List<SupplierDto>>("api/Supplier/GetSuppliers");
		}
		catch (ApiException ex)
		{
			loadingMessage = ex.Message;
		}
		catch (Exception ex)
		{
			loadingMessage = ex.Message;
		}
	}

	private Task SelectedSupplierChanged(SupplierDto supplier)
	{
		if (supplier == null)
			return ValueChanged.InvokeAsync(Guid.Empty);
		
			selectedSupplier = supplier;
		Value = supplier.Id;

		return ValueChanged.InvokeAsync(supplier.Id);
	}

	private async Task<IEnumerable<SupplierDto>> searchSupplier(string searchText)
	{
		return await Task.FromResult(supplierList.Where(i => i.Name.ToUpper().Contains(searchText.ToUpper())).ToList());
	}

}